#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# vim: set ts=4 sw=4 sts=4 et:

from argparse import ArgumentParser
from sys import stdin, stdout
from os.path import splitext

import pygal
import yaml


ARG_TYPES = ('svg', 'png', 'html')
DEFAULT_TYPE = 'Line'
DEFAULT_STYLE = 'DefaultStyle'


def complete_style_type(type_):
    return type_ if type_.endswith('Style') else '%sStyle' % type_


def parse_args():
    parser = ArgumentParser('pygalgen')
    parser.add_argument('-t', '--type', choices=ARG_TYPES,
                        help=('Output type, default output file extension or '
                              'svg if not specified output'))

    parser.add_argument('-o', '--output',
                        help='Output SVG or PNG file, default STDOUT')

    parser.add_argument('yaml', nargs='?',
                        help='YAML or JSON config, default STDIN')

    args = parser.parse_args()
    if args.type:
        return args

    if args.output:
        try:
            type_ = splitext(args.output)[1][1:]
            if type_ in ARG_TYPES:
                args.type = type_
        except Exception:
            pass
    else:
        args.type = 'svg'

    return args


args = parse_args()
cfg = yaml.load(open(args.yaml) if args.yaml else stdin,
                Loader=yaml.FullLoader)

raw_type = 'Bar' if args.type == 'html' else cfg.get('type', DEFAULT_TYPE)
type_ = getattr(pygal, raw_type)
config = cfg.get('config', {})


def assign(key, alias=None):
    val = cfg.get(key, cfg.get(alias) if alias else None)
    if val:
        config[key] = val


assign('title')
assign('style')  # Overwrite config['style'] if exists.
assign('x_labels', 'x')
assign('y_labels', 'y')

if args.type == 'html' and 'x_labels' in config:
    config['x_labels'] = [str(i) for i in config['x_labels']]

style = config.get('style')
if style:
    if isinstance(style, str):
        config['style'] = getattr(pygal.style, complete_style_type(style))
    elif isinstance(style, dict):
        style_type = getattr(
            pygal.style, complete_style_type(style.get('type', DEFAULT_STYLE)))

        del style['type']
        config['style'] = style_type(**style)
    else:
        del config['style']

chart = type_(**config)
for i in cfg.get('series', ()):
    if isinstance(i, dict):
        chart.add(**i)
    elif isinstance(i, (list, tuple)):
        chart.add(title=i[0], values=i[1:])

if args.type == 'svg':
    if args.output:
        chart.render_to_file(args.output)
    else:
        stdout.buffer.write(chart.render())
elif args.type == 'png':
    if args.output:
        chart.render_to_png(args.output)
    else:
        stdout.buffer.write(chart.render_to_png())
elif args.type == 'html':
    chart.value_formatter = lambda x: 'âˆ…' if x is None else str(x)
    if args.output:
        open(args.output, 'w').write(chart.render_table(style=True))
    else:
        stdout.write(chart.render_table(style=True))
