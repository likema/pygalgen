#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# vim: set ts=4 sw=4 sts=4 et:

from argparse import ArgumentParser
from sys import stdin, stdout

import pygal
import yaml


DEFAULT_TYPE = 'Line'
DEFAULT_STYLE = 'DefaultStyle'


def complete_style_type(type_):
    return type_ if type_.endswith('Style') else '%sStyle' % type_


def parse_args():
    parser = ArgumentParser('pygalgen')
    parser.add_argument('-t', '--type', choices=('svg', 'png'), default='svg',
                        help='Output type, default svg')

    parser.add_argument('-o', '--output',
                        help='Output SVG or PNG file, default STDOUT')

    parser.add_argument('yaml', nargs='?',
                        help='YAML or JSON config, default STDIN')

    return parser.parse_args()


args = parse_args()
cfg = yaml.load(open(args.yaml) if args.yaml else stdin,
                Loader=yaml.FullLoader)

type_ = getattr(pygal, cfg.get('type', DEFAULT_TYPE))
config = cfg.get('config', {})


def assign(key, alias=None):
    val = cfg.get(key, cfg.get(alias) if alias else None)
    if val:
        config[key] = val


assign('title')
assign('style')  # Overwrite config['style'] if exists.
assign('x_labels', 'x')
assign('y_labels', 'y')

style = config.get('style')
if style:
    if isinstance(style, str):
        config['style'] = getattr(pygal.style, complete_style_type(style))
    elif isinstance(style, dict):
        style_type = getattr(
            pygal.style, complete_style_type(style.get('type', DEFAULT_STYLE)))

        del style['type']
        config['style'] = style_type(**style)
    else:
        del config['style']

chart = type_(**config)
type_ = getattr(pygal, cfg.get('type', DEFAULT_TYPE))
for i in cfg.get('series', ()):
    if isinstance(i, dict):
        chart.add(**i)
    elif isinstance(i, (list, tuple)):
        chart.add(title=i[0], values=i[1:])

if args.type == 'svg':
    if args.output:
        chart.render_to_file(args.output)
    else:
        stdout.buffer.write(chart.render())
elif args.output:
    chart.render_to_png(args.output)
else:
    stdout.buffer.write(chart.render_to_png())
