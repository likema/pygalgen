#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# vim: set ts=4 sw=4 sts=4 et:

from argparse import ArgumentParser
from sys import stdin, stdout
from os.path import splitext

import pygal
import yaml


ARG_TYPES = ('svg', 'png', 'html')
DEFAULT_TYPE = 'Line'
DEFAULT_STYLE = 'DefaultStyle'


class GoogleClassicStyle(pygal.style.Style):
    """A Google Spreadsheet Classic theme"""

    background = 'transparent'
    plot_background = 'transparent'
    foreground = '#757575'
    foreground_strong = '#757575'
    foreground_subtle = '#cccccc'
    colors = (
        '#4285f4',  # ~ RoyalBlue1
        '#db4437',  # ~ tomato3
        '#f4b400',  # ~ DarkGoldenrod2
        '#93c47d',  # ~ dark sea green
        '#ff6d00',  # ~ DarkOrange1
        '#46bdc6',  # ~ medium turquoise
    )

    value_colors = colors
    font_family = 'Roboto,RobotoDraft,Helvetica,Arial,sans-serif'
    title_font_size = 14
    legend_font_size = 14
    value_font_size = 12


class GoogleStandardStyle(pygal.style.Style):
    """A Google Spreadsheet Standard theme"""

    background = 'transparent'
    plot_background = 'transparent'
    foreground = '#757575'
    foreground_strong = '#757575'
    foreground_subtle = '#cccccc'
    colors = (
        '#4285f4',  # ~ RoyalBlue1
        '#ea4335',  # ~ brown2
        '#fbbc04',  # ~ DarkGoldenrod1
        '#34a853',  # ~ sea green
        '#ff6d01',  # ~ DarkOrange1
        '#46bdc6',  # ~ medium turquoise
    )

    value_colors = colors
    font_family = 'Roboto,RobotoDraft,Helvetica,Arial,sans-serif'
    title_font_size = 14
    legend_font_size = 14
    value_font_size = 12


class GoogleSimpleLightStyle(pygal.style.Style):
    """A Google Spreadsheet Simple Light theme"""

    background = 'transparent'
    plot_background = 'transparent'
    foreground = '#757575'
    foreground_strong = '#757575'
    foreground_subtle = '#cccccc'
    colors = (
        '#5891ad',  # ~ cadet blue
        '#004561',  # ~ DodgerBlue4
        '#ff6f31',  # ~ chocolate1
        '#1c7685',  # ~ DeepSkyBlue4
        '#0f45a8',  # ~ DodgerBlue4
        '#4cdc8b',  # ~ SeaGreen2
    )

    value_colors = colors
    font_family = 'Roboto,RobotoDraft,Helvetica,Arial,sans-serif'
    title_font_size = 14
    legend_font_size = 14
    value_font_size = 12


class GoogleStreamlineStyle(pygal.style.Style):
    """A Google Spreadsheet Streamline theme"""

    background = 'transparent'
    plot_background = 'transparent'
    foreground = '#1a1a1a'
    foreground_strong = '#1a1a1a'
    foreground_subtle = '#cccccc'
    colors = (
        '#1a9988',  # ~ cyan4
        '#2d729d',  # ~ SteelBlue4
        '#1f3e78',  # ~ RoyalBlue4
        '#eb5600',  # ~ OrangeRed2
        '#ff99ac',  # ~ LightPink2
        '#ffd4b8',  # ~ peach puff
    )

    value_colors = colors
    font_family = 'Roboto,RobotoDraft,Helvetica,Verdana,sans-serif'
    title_font_size = 14
    legend_font_size = 14
    value_font_size = 12


class GoogleParadigmStyle(pygal.style.Style):
    """A Google Spreadsheet Paradigm theme"""

    background = 'transparent'
    plot_background = 'transparent'
    foreground = '#071924'
    foreground_strong = '#071924'
    foreground_subtle = '#cccccc'
    colors = (
        '#002f4a',  # ~ midnight blue
        '#b85741',  # ~ coral3
        '#ad8463',  # ~ LightSalmon3
        '#009384',  # ~ cyan4
        '#eddac9',  # ~ AntiqueWhite2
        '#6fc8d6',  # ~ DarkSlateGray3
    )

    value_colors = colors
    font_family = 'Roboto,RobotoDraft,Helvetica,Georgia,sans-serif'
    title_font_size = 14
    legend_font_size = 14
    value_font_size = 12


class GoogleShiftStyle(pygal.style.Style):
    """A Google Spreadsheet Shift theme"""

    background = 'transparent'
    plot_background = 'transparent'
    foreground = '#233a44'
    foreground_strong = '#233a44'
    foreground_subtle = '#cccccc'
    colors = (
        '#00796b',  # ~ turquoise4
        '#bf8659',  # ~ LightSalmon3
        '#00435e',  # ~ DodgerBlue4
        '#d9563f',  # ~ coral3
        '#e7bb63',  # ~ sandy brown
        '#144cf5',  # ~ DodgerBlue3
    )

    value_colors = colors
    font_family = 'Roboto,RobotoDraft,Helvetica,Verdana,sans-serif'
    title_font_size = 14
    legend_font_size = 14
    value_font_size = 12


def complete_style_type(type_):
    return type_ if type_.endswith('Style') else '%sStyle' % type_


def parse_args():
    parser = ArgumentParser('pygalgen')
    parser.add_argument('-t', '--type', choices=ARG_TYPES,
                        help=('Output type, default output file extension or '
                              'svg if not specified output'))

    parser.add_argument('-o', '--output',
                        help='Output SVG or PNG file, default STDOUT')

    parser.add_argument('yaml', nargs='?',
                        help='YAML or JSON config, default STDIN')

    args = parser.parse_args()
    if args.type:
        return args

    if args.output:
        try:
            type_ = splitext(args.output)[1][1:]
            if type_ in ARG_TYPES:
                args.type = type_
        except Exception:
            pass
    else:
        args.type = 'svg'

    return args


args = parse_args()
cfg = yaml.load(open(args.yaml) if args.yaml else stdin,
                Loader=yaml.FullLoader)

pygal.style.GoogleClassicStyle = GoogleClassicStyle
pygal.style.GoogleStandardStyle = GoogleStandardStyle
pygal.style.GoogleSimpleLightStyle = GoogleSimpleLightStyle
pygal.style.GoogleStreamlineStyle = GoogleStreamlineStyle
pygal.style.GoogleParadigmStyle = GoogleParadigmStyle
pygal.style.GoogleShiftStyle = GoogleShiftStyle

raw_type = 'Bar' if args.type == 'html' else cfg.get('type', DEFAULT_TYPE)
type_ = getattr(pygal, raw_type)
config = cfg.get('config', {})


def assign(key, alias=None):
    val = cfg.get(key, cfg.get(alias) if alias else None)
    if val:
        config[key] = val


assign('title')
assign('style')  # Overwrite config['style'] if exists.
assign('x_labels', 'x')
assign('y_labels', 'y')
assign('x_title')
assign('y_title')

if args.type == 'html' and 'x_labels' in config:
    config['x_labels'] = [str(i) for i in config['x_labels']]

style = config.get('style')
if style:
    if isinstance(style, str):
        config['style'] = getattr(pygal.style, complete_style_type(style))
    elif isinstance(style, dict):
        style_type = getattr(
            pygal.style, complete_style_type(style.get('type', DEFAULT_STYLE)))

        del style['type']
        config['style'] = style_type(**style)
    else:
        del config['style']

chart = type_(**config)
for i in cfg.get('series', ()):
    if isinstance(i, dict):
        chart.add(**i)
    elif isinstance(i, (list, tuple)):
        chart.add(title=i[0], values=i[1:])

if args.type == 'svg':
    if args.output:
        chart.render_to_file(args.output)
    else:
        stdout.buffer.write(chart.render())
elif args.type == 'png':
    if args.output:
        chart.render_to_png(args.output)
    else:
        stdout.buffer.write(chart.render_to_png())
elif args.type == 'html':
    chart.value_formatter = lambda x: 'âˆ…' if x is None else str(x)
    if args.output:
        open(args.output, 'w').write(chart.render_table(style=True))
    else:
        stdout.write(chart.render_table(style=True))
